package com.example.exploit;

import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.Logger;
import com.example.exploit.annotation.JNDIController;
import com.example.exploit.annotation.JNDIMapping;
import org.reflections.Reflections;
import org.reflections.scanners.MethodAnnotationsScanner;
import org.reflections.scanners.TypeAnnotationsScanner;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Method;
import java.util.Hashtable;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Dispatcher {
    public static Hashtable<String, Object> dispatch(String path, Hashtable<String, String> params) throws Exception {
        // 关闭 Reflections 包的日志输出
        Logger root = (Logger) LoggerFactory.getLogger("org.reflections");
        root.setLevel(Level.OFF);

        // 扫描所有使用 JNDIController 注解的类
        Reflections ref = new Reflections("com.example.exploit.controller",
                new TypeAnnotationsScanner(), new MethodAnnotationsScanner());
        Set<Class<?>> controllerClasses = ref.getTypesAnnotatedWith(JNDIController.class);

        for (Class<?> clazz : controllerClasses) {
            // 获取 JNDIMapping 注解
            JNDIMapping baseMapping = clazz.getAnnotation(JNDIMapping.class);
            String basePath = (baseMapping != null) ? baseMapping.value() : "";
            Method[] methods = clazz.getMethods();

            for (Method method : methods) {
                JNDIMapping methodMapping = method.getAnnotation(JNDIMapping.class);

                // 匹配路由
                if (methodMapping != null) {
                    String mappingPath = basePath + methodMapping.value();
                    String regex = mappingPath.replaceAll("\\{.*?\\}", "([^/]+)");
                    Pattern valuePattern = Pattern.compile("^" + regex + "$");
                    Matcher valueMatcher = valuePattern.matcher(path); // 提取参数值

                    if (valueMatcher.matches()) {
                        Pattern namePattern = Pattern.compile("\\{(.*?)\\}");
                        Matcher nameMatcher = namePattern.matcher(mappingPath); // 提取参数名

                        int groupIndex = 1;
                        while (nameMatcher.find()) {
                            String name = nameMatcher.group(1);
                            String value = valueMatcher.group(groupIndex);
                            groupIndex ++;
                            params.put(name, value); // 将参数存入 params 字典
                        }

                        Object obj = clazz.newInstance();
                        method.invoke(obj, params); // 调用与路由相对应的方法, 执行结果会写入 params 字典
                        return (Hashtable<String, Object>) clazz.getDeclaredMethod("process", Hashtable.class).invoke(obj, params); // 返回 result 字典
                    }
                }
            }
        }
        return null;
    }
}
